<?xml version="1.0" encoding="UTF-8" ?> <!-- Licensed to the Apache Software Foundation (ASF) 
 under one or more contributor license agreements.  See the NOTICE file distributed with this work 
 for additional information regarding copyright ownership. The ASF licenses this file to You under 
 the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance 
 with the License.  You may obtain a copy of the License at
                                                                                                          
     http://www.apache.org/licenses/LICENSE-2.0                                                           
                                                                                                          
 Unless required by applicable law or agreed to in writing, software distributed under the License 
 is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express 
 or implied. See the License for the specific language governing permissions and limitations under 
 the License.
-->
                                                                                                          
<!-- This is the Solr schema file. This file should be named "schema.xml" and should be in the 
 conf directory under the solr home (i.e. ./solr/conf/schema.xml by default) or located where the 
 classloader for the Solr webapp can find it.
                                                                                                          
 This example schema is the recommended starting point for users. It should be kept correct and 
 concise, usable out-of-the-box.
                                                                                                          
 For more information, on how to customize this file, please see 
 http://wiki.apache.org/solr/SchemaXml                                                                    
                                                                                                          
 PERFORMANCE NOTE: this schema includes many optional features and should not be used for 
 benchmarking.  To improve performance one could
  - set stored="false" for all fields possible (esp large fields) when you only need to search on 
    the field but don't need to return the original value.
  - set indexed="false" if you don't need to search on the field, but only return the field as a 
    result of searching on other indexed fields.
  - remove all unneeded copyField statements - for best index size and searching performance, set 
  "index" to false
    for all general text fields, use copyField to copy them to the catchall "text" field, and use 
    that for searching.
  - For maximum indexing performance, use the ConcurrentUpdateSolrServer java client. - Remember 
  to run the JVM in server mode, and use a higher logging level
    that avoids logging every request -->
                                                                                                          
<schema name="haystack-schema" version="1.6">
                                                                                                          
    <!--
    ######################## django-haystack specifics begin ########################
    -->
                                                                                                          
    <fieldType name="edge_ngram" class="solr.TextField" positionIncrementGap="1"> <analyzer 
        type="index">
            <tokenizer class="solr.WhitespaceTokenizerFactory" /> <filter 
            class="solr.LowerCaseFilterFactory" /> <filter 
            class="solr.WordDelimiterGraphFilterFactory" generateWordParts="1" generateNumberParts
="1" catenateWords="0" catenateNumbers="0" catenateAll="0" splitOnCaseChange="1"/> <filter 
            class="solr.EdgeNGramFilterFactory" minGramSize="2" maxGramSize="15" />
        </analyzer> <analyzer type="query"> <tokenizer class="solr.WhitespaceTokenizerFactory" /> 
            <filter class="solr.LowerCaseFilterFactory" /> <filter 
            class="solr.WordDelimiterGraphFilterFactory" generateWordParts="1" generateNumberParts
="1" catenateWords="0" catenateNumbers="0" catenateAll="0" splitOnCaseChange="1"/> </analyzer> 
    </fieldType>
                                                                                                          
    <fieldType name="ngram" class="solr.TextField" > <analyzer type="index"> <tokenizer 
            class="solr.KeywordTokenizerFactory"/> <filter class="solr.LowerCaseFilterFactory"/> 
            <filter class="solr.NGramFilterFactory" minGramSize="3" maxGramSize="15" />
        </analyzer> <analyzer type="query"> <tokenizer class="solr.KeywordTokenizerFactory"/> 
            <filter class="solr.LowerCaseFilterFactory"/>
        </analyzer> </fieldType>
                                                                                                          
    <field name="id" type="string" indexed="true" stored="true" multiValued="false" 
    required="true"/> <field name="django_ct" type="string" indexed="true" stored="true" 
    multiValued="false"/> <field name="django_id" type="string" indexed="true" stored="true" 
    multiValued="false"/> <uniqueKey>id</uniqueKey>
                                                                                                          
    <!--
    ######################## django-haystack specifics end ########################
    -->
                                                                                                          
    <!-- attribute "name" is the name of this schema and is only used for display purposes. 
       version="x.y" is Solr's version number for the schema syntax and semantics.  It should not 
       normally be changed by applications.
                                                                                                          
       1.0: multiValued attribute did not exist, all fields are multiValued by nature 1.1: 
       multiValued attribute introduced, false by default 1.2: omitTermFreqAndPositions attribute 
       introduced, true by default
            except for text fields. 1.3: removed optional field compress feature 1.4: 
       autoGeneratePhraseQueries attribute introduced to drive QueryParser
            behavior when a single string produces multiple tokens.  Defaults to off for version 
            >= 1.4
       1.5: omitNorms defaults to true for primitive field types (int, float, boolean, string...) 
       1.6: useDocValuesAsStored defaults to true.
    -->
                                                                                                          
    <!-- Valid attributes for fields:                                                 
